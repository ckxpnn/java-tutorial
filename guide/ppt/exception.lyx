#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
% see http://deic.uab.es/~iblanes/beamer_gallery/ for how 
% to choose theme and color
\usetheme{Warsaw}
% or AnnArbor, Antibes,Bergen, Berkeley, Berlin, Boadilla,
%CambridgeUS, Copenhagen, Darmstadt, default, Dresden,
%Frankfurt, Goettingen, Hannover, Ilmenau, JuanLesPins,
%Luebeck, Madrid, Malmoe, Marburg, Montpellier, PaloAlto,
%Pittsburgh, Rochester, Singapore, Szeged, Stockton,
%boxes, Warsaw…

%\usecolortheme{whale}
%or albatross, orchid, beaver, rose, beetle, seagull, crane.
%seahorse, default, sidebartab, dolphin , structure
%dove, whale, fly, wolverine, lily
\end_preamble
\use_default_options true
\begin_modules
logicalmkup
multicol
coderemarks
\end_modules
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "文泉驿点阵正黑"
\font_sans "default" "文泉驿微米黑"
\font_typewriter "default" "文泉驿等宽正黑"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\float_placement tbph
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 3
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\boxbgcolor #dad3d7
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
异常处理
\end_layout

\begin_layout Author
宿宝臣 <subaochen@126.com>
\end_layout

\begin_layout Institute
山东理工大学
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
概述
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section
异常(Exception)概念的导入
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout FragileFrame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
从一个例子说起
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
输出两个参数的商:
\end_layout

\end_deeper
\begin_layout FragileFrame
\begin_inset Box Doublebox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "language=Java,showstringspaces=false"
inline false
status open

\begin_layout Plain Layout

public static void main(String[] args) {
\end_layout

\begin_layout Plain Layout

    int a = Integer.parseInt(args[0]);
\end_layout

\begin_layout Plain Layout

    int b = Integer.parseInt(args[1]);
\end_layout

\begin_layout Plain Layout

    System.out.println("a/b = " +  a/b);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Let's try:步步惊心
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout

+-
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
没有给出足够数量的参数
\end_layout

\begin_layout Itemize
参数格式不合法:不能转换成整数
\end_layout

\begin_layout Itemize
除数为0
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
C style解决方案
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
public static void main(String[] args) {
\end_layout

\begin_layout LyX-Code
  if(args.length != 2){
\end_layout

\begin_layout LyX-Code
    System.out.println("请提供2个参数!");
\end_layout

\begin_layout LyX-Code
    return;
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
  if(args[1].equalsIgnoreCase("0")){
\end_layout

\begin_layout LyX-Code
    System.out.println("除数不能为0!");
\end_layout

\begin_layout LyX-Code
    return;
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
  int a = Integer.parseInt(args[0]);
\end_layout

\begin_layout LyX-Code
  int b = Integer.parseInt(args[1]);
\end_layout

\begin_layout LyX-Code
  System.out.println("a/b = " +  a/b);
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
完整示例参见:DivTestCLike.java
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
C style解决方案有什么问题吗?
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
any problems?
\end_layout

\begin_layout Itemize
语法正确,语义明确,思路清晰,考虑周全
\end_layout

\begin_layout Itemize
值得赞赏
\end_layout

\begin_layout Itemize
但是,Java可以让生活更完美,更轻松
\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Java style解决方案
\end_layout

\end_inset


\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
public static void main(String[] args) {
\end_layout

\begin_layout LyX-Code
   try {
\end_layout

\begin_layout LyX-Code
      int a = Integer.parseInt(args[0]);
\end_layout

\begin_layout LyX-Code
      int b = Integer.parseInt(args[1]);
\end_layout

\begin_layout LyX-Code
      System.out.println("a/b = " + a / b);
\end_layout

\begin_layout LyX-Code
   } 
\end_layout

\begin_layout LyX-Code

\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Java style解决方案(续)
\end_layout

\end_inset


\begin_inset Argument 3
status open

\begin_layout Plain Layout
plain
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
    catch (ArrayIndexOutOfBoundsException e) {
\end_layout

\begin_layout LyX-Code
        System.out.println("数组越界，运行程序时输入的
\end_layout

\begin_layout LyX-Code
           参数个数不对。应该输入2个参数，您输入的参数
\end_layout

\begin_layout LyX-Code
           个数是：" + args.length);
\end_layout

\begin_layout LyX-Code
        //e.printStackTrace();
\end_layout

\begin_layout LyX-Code
    } catch (NumberFormatException e) {
\end_layout

\begin_layout LyX-Code
        System.out.println("数字格式异常，
\end_layout

\begin_layout LyX-Code
            程序只能接受整数形式的参数");
\end_layout

\begin_layout LyX-Code
        //e.printStackTrace();
\end_layout

\begin_layout LyX-Code
    } catch (ArithmeticException e) {
\end_layout

\begin_layout LyX-Code
        System.out.println("数学异常，除数不能为0");
\end_layout

\begin_layout LyX-Code
        //e.printStackTrace();
\end_layout

\begin_layout LyX-Code
    } catch (Exception e) {
\end_layout

\begin_layout LyX-Code
        System.out.println("天知道发生了什么，
\end_layout

\begin_layout LyX-Code
            总之情况不对");
\end_layout

\begin_layout LyX-Code
        //e.printStackTrace();
\end_layout

\begin_layout LyX-Code
    }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
C style vs.
 Java style
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout
+-
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
层次更清晰,很容易辨识主流程和异常流程
\begin_inset Note Note
status open

\begin_layout Plain Layout
这个图应该针对上面的例子重新画
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset Graphics
	filename /home/subaochen/git/java-tutorial/guide/imgs/exception/java-style-exception-blocks.eps
	width 60line%

\end_inset


\end_layout

\begin_layout Itemize
异常对象化,可以更好的描述异常流程和现象
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Java的异常类
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Graphics
	filename /home/subaochen/git/java-tutorial/guide/imgs/exception/exception-overview.eps
	width 100line%

\end_inset


\end_layout

\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
真的需要catch每一个异常吗?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
why catch,catch what?
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
?
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
try {...} catch(Exception e) {...}
\end_layout

\begin_layout Itemize
Java虚拟机如何匹配异常对象和catch代码块?
\end_layout

\begin_layout Itemize
只会执行一个catch代码块
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
最后的清理:finally
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
常和数据库操作、网络操作等有关
\end_layout

\begin_layout Itemize
总是被执行
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
两种类型异常
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
非检查型异常:可以不处理,交给虚拟机自动处理.处理的原因?
\end_layout

\begin_layout Itemize
检查型异常:必须处理
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
练习
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
熟悉Java异常的表达方式
\end_layout

\begin_layout Itemize
了解常见的Java异常对象
\end_layout

\begin_layout Itemize
引申出自定义异常和抛出异常
\end_layout

\end_deeper
\begin_layout Section
抛出异常
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
异常的来龙去脉
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
异常从哪里来：throw
\end_layout

\begin_layout Itemize
异常到哪里去：catch
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
异常处理的责任链
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
throws vs.
 throw
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
用途不同
\end_layout

\begin_layout Itemize
位置不同
\end_layout

\end_deeper
\begin_layout Section
用户自定义异常
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
业务逻辑异常
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Java API定义的异常并没有囊括所有情况
\end_layout

\begin_layout Itemize
业务异常举例
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
自定义异常的方法
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
extends Exception
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
异常处理太麻烦了!
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
IDE帮助很大
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
练习
\end_layout

\end_inset


\end_layout

\begin_layout Frame

\end_layout

\begin_layout Section
try-with-resources
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
结合Java IO讲解此部分
\end_layout

\end_inset


\end_layout

\end_body
\end_document
