#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass beamer
\begin_preamble
\input{preamble.tex}
\end_preamble
\use_default_options true
\begin_modules
logicalmkup
multicol
coderemarks
\end_modules
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "文泉驿点阵正黑"
\font_sans "default" "文泉驿微米黑"
\font_typewriter "default" "文泉驿等宽正黑"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\float_placement tbph
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 3
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\boxbgcolor #dad3d7
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
面向对象工程思想
\end_layout

\begin_layout Author
\begin_inset Note Note
status open

\begin_layout Author
宿宝臣 <subaochen@126.com>
\end_layout

\begin_layout Institute
山东理工大学
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
概述
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
Java工程师的进阶之路
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Graphics
	filename /home/subaochen/git/java-tutorial/guide/imgs/oop-project-method/programmer-steps.eps
	lyxscale 50
	width 90line%

\end_inset


\end_layout

\begin_layout Frame

\end_layout

\begin_layout Section
抽象类
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
继承回头看
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

.4
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout ColumnsTopAligned
\begin_inset Graphics
	filename /home/subaochen/git/java-tutorial/guide/imgs/oop-project-method/code-abstract-class.eps
	width 100col%

\end_inset


\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

.4
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout ColumnsTopAligned
\begin_inset Graphics
	filename /home/subaochen/git/java-tutorial/guide/imgs/oop-project-method/java-polymorphism.eps
	width 100col%

\end_inset


\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
直接继承真的完美吗？
\end_layout

\end_inset


\begin_inset Argument 2
status open

\begin_layout Plain Layout

+-
\end_layout

\end_inset


\end_layout

\begin_layout Frame

\end_layout

\begin_deeper
\begin_layout Itemize
父类实现某些方法可能没有意义，只有子类的具体实现才是有意义的，比如Animal.hello()。
\end_layout

\begin_layout Itemize
不允许根据类创建对象，比如禁止new Animal()：强制继承。
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
fragile
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
定义抽象类
\end_layout

\end_inset


\end_layout

\begin_layout Frame
抽象类的定义有两种情形：
\end_layout

\begin_deeper
\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout ColumnsTopAligned
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
抽象类可以没有抽象方法
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

public abstract class Animal {
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  public void hello() {
\end_layout

\begin_layout Plain Layout

    System.out.println("动物在打招呼");
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Column
\begin_inset ERT
status open

\begin_layout Plain Layout

.5
\backslash
textwidth
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout ColumnsTopAligned
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
具有抽象方法的类必须定义为抽象类
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

public abstract class Animal {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  public abstract void hello();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Frame

\end_layout

\begin_layout Frame

\end_layout

\begin_layout Frame

\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 3
status open

\begin_layout Plain Layout
fragile
\end_layout

\end_inset


\begin_inset Argument 4
status open

\begin_layout Plain Layout
继承抽象类
\end_layout

\end_inset


\end_layout

\begin_layout Frame
关键词：extends
\end_layout

\begin_layout Frame
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class Dog extends Animal {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  @Override
\end_layout

\begin_layout Plain Layout

  public void hello() {
\end_layout

\begin_layout Plain Layout

    System.out.println("汪汪");
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Frame

\end_layout

\begin_layout Section
接口
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
纯的抽象类
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
接口=纯的抽象类
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
定义接口
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
interface
\end_layout

\begin_layout Itemize
接口的特点
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
实现接口
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
implements
\end_layout

\begin_layout Itemize
实现多个接口，打印机的例子
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
对象的类型
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
面向接口的编程
\end_layout

\end_inset


\end_layout

\begin_layout Frame

\end_layout

\begin_layout Section
多态
\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
对象的引用
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
对象的存储模型
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Frame
\begin_inset Argument 4
status open

\begin_layout Plain Layout
多态：子类引用父类对象的自然结果
\end_layout

\end_inset


\end_layout

\begin_layout Frame
\begin_inset Note Note
status open

\begin_layout Plain Layout
继承：父类中的实现有意义吗？
\end_layout

\end_inset


\end_layout

\end_body
\end_document
